#!/bin/bash -l

#SBATCH --job-name=ops-rstudio
#SBATCH --partition=cpu
#SBATCH --ntasks=1
#SBATCH --time=10:00:00
#SBATCH --mem=120G
#SBATCH --signal=USR2
#SBATCH --cpus-per-task=4


# SOURCE: https://rocker-project.org/use/singularity.html#slurm-job-script

# Create temporary directory to be populated with directories to bind-mount in the container
# where writable file systems are necessary. Adjust path as appropriate for your computing environment.
workdir=/cephfs/volumes/hpc_data_prj/crb_chick_placodes/b627ba45-200d-4ccd-925a-f1b45d466da9/recovered/Jake/RStudio/Working

mkdir -p -m 700 ${workdir}/run ${workdir}/tmp ${workdir}/var/lib/rstudio-server ${workdir}/data ${workdir}/R/libs/AT_ArcR_macs2

cat > ${workdir}/database.conf <<END
provider=sqlite
directory=/var/lib/rstudio-server
END

# Set OMP_NUM_THREADS to prevent OpenBLAS (and any other OpenMP-enhanced
# libraries used by R) from spawning more threads than the number of processors
#
# Set R_LIBS_USER to a path specific to rocker/rstudio to avoid conflicts with
# personal libraries from any R installation in the host environment

cat > ${workdir}/rsession.sh <<END
#!/bin/sh
export OMP_NUM_THREADS=${SLURM_JOB_CPUS_PER_NODE}
export R_LIBS_USER=${workdir}/R/libs/AT_ArcR_macs2:/R/libs/AT_ArcR_macs2
exec /usr/lib/rstudio-server/bin/rsession "\${@}"
END

chmod +x ${workdir}/rsession.sh

export SINGULARITY_BIND="${workdir}/R/libs/AT_ArcR_macs2:/R/libs/AT_ArcR_macs2,${workdir}/data:/data,${workdir}/run:/run,${workdir}/tmp:/tmp,${workdir}/database.conf:/etc/rstudio/database.conf,${workdir}/rsession.sh:/etc/rstudio/rsession.sh,${workdir}/var/lib/rstudio-server:/var/lib/rstudio-server"

# Do not suspend idle sessions.
# Alternative to setting session-timeout-minutes=0 in /etc/rstudio/rsession.conf. This disables the timeout feature, meaning that the session can be picked up where it was left off.
# https://github.com/rstudio/rstudio/blob/v1.4.1106/src/cpp/server/ServerSessionManager.cpp#L126
# SINGULARITYENV_ prefix allows you to overide any environment variables already set in the container

export SINGULARITYENV_RSTUDIO_SESSION_TIMEOUT=0

export SINGULARITYENV_USER=$(id -un)
export SINGULARITYENV_PASSWORD=$(openssl rand -base64 15)
# get unused socket per https://unix.stackexchange.com/a/132524
# tiny race condition between the python & singularity commands
readonly PORT=$(python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()')
cat 1>&2 <<END
1. SSH tunnel from your workstation using the following command:

 Linux and MacOS:
   ssh -N -L 8787:${HOSTNAME}:${PORT} ${SINGULARITYENV_USER}@hpc.create.kcl.ac.uk
 
Windows:
ssh -m hmac-sha2-512 -N -L 8787:${HOSTNAME}:${PORT} ${SINGULARITYENV_USER}@hpc.create.kcl.ac.uk

   and point your web browser to http://localhost:8787

2. log in to RStudio Server using the following credentials:

   user: ${SINGULARITYENV_USER}
   password: ${SINGULARITYENV_PASSWORD}

When done using RStudio Server, terminate the job by:

1. Exit the RStudio Session ("power" button in the top right corner of the RStudio window)
2. Issue the following command on the login node:

      scancel -f ${SLURM_JOB_ID}
END

singularity exec --cleanenv /cephfs/volumes/hpc_data_prj/crb_chick_placodes/b627ba45-200d-4ccd-925a-f1b45d466da9/recovered/singularity/alexthiery-schelper-archr_dev_macs2-schelper-0.3.5.img \
    /usr/lib/rstudio-server/bin/rserver --www-port ${PORT} \
            --server-user=${USER} \
            --auth-none=0 \
            --auth-pam-helper-path=pam-helper \
            --auth-stay-signed-in-days=30 \
            --auth-timeout-minutes=0 \
            --rsession-path=/etc/rstudio/rsession.sh
printf 'rserver exited' 1>&2
